free c:channel.

(* Type Defs *)
type nonce.
type key.
type PRkey.
type PUkey.

(* Encrpyt and Decrypt Functions *)
fun pr_to_pu(PRkey): PUkey.
fun rsa_enc(bitstring,PUkey): bitstring.
reduc forall m: bitstring, k:PRkey; rsa_dec(rsa_enc(m,pr_to_pu(k)),k) = m.

fun aes_enc(bitstring,key): bitstring.
reduc forall m: bitstring, k:key; aes_dec(aes_enc(m,k),k) = m.

(* Data Converter Functions *)
fun key_to_bitstring(key) :bitstring [data,typeConverter].
fun bitstring_to_key(bitstring) :key [data,typeConverter].
fun nonce_to_bitstring(nonce):bitstring [data,typeConverter].
fun bitstring_to_nonce(bitstring):nonce [data,typeConverter].

(* Key Definitions *)
free prkClient:PRkey [private].
free prkServer:PRkey [private].
free keyOnDevice:key [private].
free ServerClientKey:key [private].
free IOTServerKey:key [private].
free AesIotKey:key [private].
free SampleCMD:bitstring [private].

(* Events *)
event ServerTerms(key,nonce).
event ClientTerms(key,nonce).
event IOTTerms(key,nonce).
event ServerAcceptsClient(key,nonce).
event ServerAcceptsIOT(key,nonce).
event ClientAccepts(key,nonce).
event IOTAccepts(key,nonce).

(* Event Questies *)
query k:key,n:nonce; inj-event(ServerTerms(k,n)) ==> inj-event(ClientAccepts(k,n)).

(* CMD Events *)
event ClientVerifysCMD(bitstring).
event ServerVerifysClientSideCMD(bitstring).
event ServerVerifysIOTSideCMD(bitstring).
event IOTVerifysCMD(bitstring).

(* CMD Event Queries *)
query cmd:bitstring; inj-event(ServerVerifysClientSideCMD(cmd)) ==> inj-event(ClientVerifysCMD(cmd)).
query cmd:bitstring; inj-event(IOTVerifysCMD(cmd)) ==> inj-event(ServerVerifysIOTSideCMD(cmd)).
(* query cmd:bitstring; inj-event(IOTVerifysCMD(cmd)) ==> inj-event(ClientVerifysCMD(cmd)). *)

(* Attacker Key Queries *)
query attacker(prkClient).
query attacker(prkServer).
query attacker(ServerClientKey).
query attacker(IOTServerKey).
query attacker(keyOnDevice).
query attacker(SampleCMD).

(* Client *)
let Client(puClient:PUkey,prClient:PRkey,puServer:PUkey) =
    (* Setup *)
    new N1: nonce;
    out(c,rsa_enc(nonce_to_bitstring(N1),puServer));
    in(c,(msg_enc:bitstring));
    let (aes_server_key_bts:bitstring,aes_n1:bitstring,N2:bitstring) = rsa_dec(msg_enc,prClient) in
    let aes_server_key = bitstring_to_key(aes_server_key_bts) in
    let n1 = aes_dec(aes_n1,aes_server_key) in
    if N1 = bitstring_to_nonce(n1) then
    event ClientAccepts(aes_server_key,N1);
    out(c,(aes_enc(N2,aes_server_key)));

    (* Sample CMD *)
    (* SampleCMD will be generated here. It is passed in for quering *)
    new cmd_nonce:nonce;
    out(c,(aes_enc((SampleCMD,nonce_to_bitstring(cmd_nonce)),aes_server_key)));
    in(c,enc_cmd_verification:bitstring);
    let (cmd_n_verif:bitstring,cmd_nx:bitstring) = aes_dec(enc_cmd_verification,aes_server_key) in
    if cmd_nonce = bitstring_to_nonce(cmd_n_verif) then
    event ClientVerifysCMD(SampleCMD);
    out(c,aes_enc(cmd_nx,aes_server_key));

    event ClientTerms(aes_server_key,N1);
0.

(* Server *)
let Server(puServer:PUkey,prServer:PRkey,puClient:PUkey,keyOnDevice:key) =
    (* Client Setup *)
    in(c,NX:bitstring);
    (* Server will create ServerCLientKey here. It is passed in so we can query it*)
    let N1 = bitstring_to_nonce(rsa_dec(NX,prServer)) in
    let aes_client_key_bts = key_to_bitstring(ServerClientKey) in
    new N2:nonce;
    out(c,rsa_enc((aes_client_key_bts,aes_enc(nonce_to_bitstring(N1),ServerClientKey),N2),puClient));
    in(c, verif_msg:bitstring);
    let NX = bitstring_to_nonce(aes_dec(verif_msg,ServerClientKey)) in
    if N2 = NX then
    event ServerAcceptsClient(ServerClientKey,N1);

    (* IOT Setup *)
    in(c,iot_enc_msg:bitstring);
    let (aes_iot_key_bts:bitstring,N2X:bitstring) = aes_dec(iot_enc_msg,keyOnDevice) in
    let aes_iot_key = bitstring_to_key(aes_iot_key_bts) in
    let N2 = bitstring_to_nonce(N2X) in
    out(c,aes_enc(nonce_to_bitstring(N2),aes_iot_key));
    event ServerAcceptsIOT(aes_iot_key,N2);

    (* Sample CMD From Client*)
    in(c,enc_cmd_msg:bitstring);
    let (cmd:bitstring, nx:bitstring) = aes_dec(enc_cmd_msg,ServerClientKey) in
    new cmd_verif_nonce:nonce;
    out(c,aes_enc((nx,cmd_verif_nonce),ServerClientKey));
    in(c,cmd_vnx:bitstring);
    if cmd_verif_nonce = bitstring_to_nonce(aes_dec(cmd_vnx,ServerClientKey)) then
    event ServerVerifysClientSideCMD(cmd);

    (* Send CMD To Iot *)
    new cmd_iot_nonce:nonce;
    out(c,aes_enc((cmd,cmd_iot_nonce),aes_iot_key));
    in(c,cmd_iot_verif:bitstring);
    let(cmd_iot_verf:bitstring,cmd_nx:bitstring) = aes_dec(cmd_iot_verif,aes_iot_key) in
    if cmd_iot_nonce = bitstring_to_nonce(cmd_iot_verf) then
    event ServerVerifysIOTSideCMD(cmd);
    out(c,aes_enc(cmd_nx,aes_iot_key));

    event ServerTerms(ServerClientKey,N1);
    event ServerTerms(aes_iot_key,N2);
0.

(* IOT Device *)
let Iot_device() =
    (* Setup *)
    (* IOT will create IOTServerKey here. It is passed in so we can query it*)
    new N1 : nonce;
    out(c,aes_enc(((key_to_bitstring(IOTServerKey),nonce_to_bitstring(N1))),keyOnDevice));
    in(c,enc_msg_verification:bitstring);
    if N1 = bitstring_to_nonce(aes_dec(enc_msg_verification,IOTServerKey)) then
    event IOTAccepts(IOTServerKey,N1);

    (* Sample CMD *)
    in(c,enc_cmd_msg:bitstring);
    let (cmd:bitstring, nx:bitstring) = aes_dec(enc_cmd_msg,IOTServerKey) in
    new cmd_verif_nonce:nonce;
    out(c,aes_enc((nx,cmd_verif_nonce),IOTServerKey));
    in(c,cmd_vnx:bitstring);
    if cmd_verif_nonce = bitstring_to_nonce(aes_dec(cmd_vnx,IOTServerKey)) then
    event IOTVerifysCMD(cmd);

    event IOTTerms(IOTServerKey,N1);
0.

process
let pukClient = pr_to_pu(prkClient) in
let pukServer = pr_to_pu(prkServer) in
( (!Server(pukServer,prkServer,pukClient,keyOnDevice)) | (!Client(pukClient,prkClient,pukServer)) | (!Iot_device()))
